// File: forms.less
// Note:


// -------------------------
// Form Core
// -------------------------


fieldset {
  border: 0;
  margin: 0;
  // Chrome and Firefox set a `min-width: min-content;` on fieldsets,
  // so we reset that to ensure it behaves more like a standard block element.
  // See https://github.com/twbs/bootstrap/issues/12359.
  min-width: 0;
  padding: 0;
}

label {
  color: @gray;
  display: inline-block;
  font-weight: @font-weight-semibold;
  margin-bottom: .5rem;
}

legend {
  border: 0;
  border-bottom: 1px solid @legend-border-color;
  color: @legend-color;
  display: block;
  font-size: (@font-size-base * 1.5);
  line-height: inherit;
  margin-bottom: @line-height-computed;
  padding: 0;
  width: 100%;
}

textarea {
  resize: none;
}


// -------------------------
// Form Normalization
// -------------------------


// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.


// Override content-box in Normalize (* isn't specific enough)
input[type='search'] {
  box-sizing: border-box;
}

// Position radios and checkboxes better
input[type='radio'],
input[type='checkbox'] {
  line-height: normal;
  margin: @margin-xsmall 0 0;
}

input[type='file'] {
  display: block;
}

// Make range inputs behave like textual form controls
input[type='range'] {
  display: block;
  width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

// Focus for file, radio, and checkbox
input[type='file']:focus,
input[type='radio']:focus,
input[type='checkbox']:focus {
  &:extend(.u-tab-focus);
}


// -------------------------
// Form
// -------------------------


.form {
  position: relative;
}


// -------------------------
// Form Modifiers
// -------------------------


.form--inline {

  // Kick in the inline
  @media (min-width: @screen-sm-min) {
    // Inline-block all the things for 'inline'
    .form__group {
      align-items: center;
      display: inline-flex;
      margin-bottom: 0;
      vertical-align: middle;

      > label {
        margin-bottom: 0;
        margin-right: @margin-small;
      }
    }

    // In navbar-form, allow folks to *not* use `.form-group`
    .form__control {
      display: inline-block;
      vertical-align: middle;
      width: auto; // Prevent labels from stacking above inputs in `.form-group`
    }

    // Make static controls behave like regular ones
    .form__control--static {
      display: inline-block;
    }


    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match.
    .rhinodio,
    .rhinobox {
      display: inline-block;
      margin-bottom: 0;
      margin-top: 0;
      vertical-align: middle;

      label {
        padding-left: 0;
      }
    }
    .rhinodio input[type='radio'],
    .rhinobox input[type='checkbox'] {
      margin-left: 0;
      position: relative;
    }

  }
}


// -------------------------
// Form Control
// -------------------------


// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type='text']
// input[type='password']
// input[type='datetime']
// input[type='datetime-local']
// input[type='date']
// input[type='month']
// input[type='time']
// input[type='week']
// input[type='number']
// input[type='email']
// input[type='url']
// input[type='search']
// input[type='tel']
// input[type='color']


.form__control {
  -webkit-appearance: none;
  background-color: @input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid @input-border;
  border-radius: @input-border-radius;
  color: @input-color;
  display: block;
  font-size: @font-size-base;
  height: @input-height-base;
  line-height: @line-height-base;
  padding: @padding-base-vertical @padding-small-horizontal;
  transition: border-color @trans-timing-cubic .15s, box-shadow @trans-timing-cubic .15s;
  vertical-align: middle;
  width: 100%;

  &:focus {
    &:extend(.u-tab-focus);
  }

  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    background-color: @input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
  }

  &[disabled],
  fieldset[disabled] & {
    cursor: @cursor-disabled;
  }

  textarea& {
    height: auto;
  }
}


// -------------------------
// Form Control Modifiers
// -------------------------


.form__control--lg {
  .input-size(@input-height-large; @padding-large-vertical; @padding-large-horizontal; @font-size-large; @line-height-large; @input-border-radius-large);
}

.form__control--sm {
  .input-size(@input-height-small; @padding-small-vertical; @padding-small-horizontal; @font-size-small; @line-height-small; @input-border-radius-small);
}

// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.

.form__control--static {
  margin-bottom: 0;
  min-height: (@line-height-computed + @font-size-base);
  padding-bottom: @padding-base-vertical;
  padding-top: @padding-base-vertical;

  &.form__control--lg,
  &.form__control--sm {
    padding-left: 0;
    padding-right: 0;
  }
}


// -------------------------
// Form Group
// -------------------------


// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form__group {
  margin-bottom: @form-group-margin-bottom;
}


// -------------------------
// Form iOS Search Inputs
// -------------------------


// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form__control` class can properly style them. Note that this cannot simply
// be added to `.form__control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.


input[type='search'] {
  -webkit-appearance: none;
}


// -------------------------
// Form iOS Temporal Inputs
// -------------------------


// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned. As a workaround, we
// set a pixel line-height that matches the given height of the input, but only
// for Safari. See https://bugs.webkit.org/show_bug.cgi?id=139848
//
// Note that as of 8.3, iOS doesn't support `datetime` or `week`.


@media screen and (-webkit-min-device-pixel-ratio: 0) {
  input[type='date'],
  input[type='time'],
  input[type='datetime-local'],
  input[type='month'] {
    &.form__control {
      line-height: @input-height-base;
    }

    /*&.form__control--sm,
    .form__input-group__sm & {
      line-height: @input-height-small;
    }

    &.form__control--lg,
    .form__input-group__lg & {
      line-height: @input-height-large;
    }*/
  }
}


// -------------------------
// Form Optional
// -------------------------


.form__optional {
  font-weight: normal;
  color: @brand-secondary;
}


// -------------------------
// Form Placeholder
// -------------------------


[placeholder] {
  .u-text-overflow;
}

// Override Firefox's unusual default opacity
// see https://github.com/twbs/bootstrap/pull/11526
&::-moz-placeholder {
  color: @input-color-placeholder;
  opacity: 1;
}

// Internet Explorer 10+
&:-ms-input-placeholder {
  color: @input-color-placeholder;
}

// Safari and Chrome
&::-webkit-input-placeholder {
  color: @input-color-placeholder;
}


// -------------------------
// Form Control Sizing
// -------------------------


// Build on `.form__control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form__group-* form__control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.

/*.form__control--sm {
  .input-size(@input-height-small; @padding-small-vertical; @padding-small-horizontal; @font-size-small; @line-height-small; @input-border-radius-small);
}*/

/*.form__group--sm {
  .form__control {
    border-radius: @input-border-radius-small;
    font-size: @font-size-small;
    height: @input-height-small;
    line-height: @line-height-small;
    padding: @padding-small-vertical @padding-small-horizontal;
  }
  select.form__control {
    height: @input-height-small;
    line-height: @input-height-small;
  }
  textarea.form__control,
  select[multiple].form__control {
    height: auto;
  }
  .form__control-static {
    font-size: @font-size-small;
    height: @input-height-small;
    line-height: @line-height-small;
    min-height: (@line-height-computed + @font-size-small);
    padding: (@padding-small-vertical + 1) @padding-small-horizontal;
  }
}*/

/*.form__control--lg {
  .input-size(@input-height-large; @padding-large-vertical; @padding-large-horizontal; @font-size-large; @line-height-large; @input-border-radius-large);
}*/

/*.form__group--lg {
  .form__control {
    border-radius: @input-border-radius-large;
    font-size: @font-size-large;
    height: @input-height-large;
    line-height: @line-height-large;
    padding: @padding-large-vertical @padding-large-horizontal;
  }
  select.form__control {
    height: @input-height-large;
    line-height: @input-height-large;
  }
  textarea.form__control,
  select[multiple].form__control {
    height: auto;
  }
  .form__control-static {
    font-size: @font-size-large;
    height: @input-height-large;
    line-height: @line-height-large;
    min-height: (@line-height-computed + @font-size-large);
    padding: @padding-large-vertical @padding-large-horizontal;
  }
}*/


// -------------------------
// Rhinobox & Rhinodio
// -------------------------


input[type='radio'],
input[type='checkbox'] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor: @cursor-disabled;
    opacity: @opacity-disabled;
  }
}

.rhinobox,
.rhinodio {
  display: block;
  margin-bottom: @margin-small;
  margin-top: @margin-small;
  position: relative;

  label {
    cursor: pointer;
    //display: inline;
    font-weight: normal;
    margin-bottom: 0;
    min-height: @line-height-computed; // Ensure the input doesn't jump when there is no text
    user-select: none;
  }

  &.disabled,
  fieldset[disabled] & {
    label {
      cursor: @cursor-disabled;
      opacity: @opacity-disabled;
    }
  }
}


.rhinobox {
  padding-left: 0;

  input {
    display: none;

    &:checked+label::before {
      background-color: @form-element-color;
      .svg-bg-add-fill('@{svg-path}checkmark.svg', @white);
      background-position: center .1rem;
      background-repeat: no-repeat;
      background-size: 1.2rem 1.2rem;
      border-color: @form-element-color;
    }
  }

  label {
    &::before {
      background-color: @white;
      border: 1px solid @border-color-base;
      content: '';
      display: inline-block;
      height: 1.7rem;
      left: .5px;
      line-height: 1.3rem;
      margin: .1rem @margin-small .1rem 0;
      padding: 0;
      position: relative;
      speak: none;
      text-align: center;
      top: -.1rem;
      transition: background-color 250ms @trans-timing-cubic;
      vertical-align: middle;
      width: 1.7rem;
    }
  }
}

.rhinodio {
  padding-left: 0;

  input {
    display: none;

    &:checked+label::before {
      background-color: @form-element-color;
    }
  }

  label {
    &::before {
      background-color: @white;
      border: .2rem solid @white;
      border-radius: 50%;
      box-shadow: 0 0 0 1px @border-color-base;
      content: '';
      display: inline-block;
      height: 1.6rem;
      left: .2rem;
      margin: 0 @margin-base 0 0;
      position: relative;
      top: .3rem;
      transition: background-color 250ms @trans-timing-cubic;
      width: 1.6rem;
    }
  }
}

.rhinobox--inline,
.rhinodio--inline {
  display: inline-block;
  margin-right: @margin-large;
}


// -------------------------
// Rhinoselect
// -------------------------


// Must wrap select element with 'rhinoselect' container in order to use ::after
// pseudo element for chevron down.


.rhinoselect {

  position: relative;
  vertical-align: middle;

  > select {
    -moz-appearance: none;
    -webkit-appearance: none;
    cursor: pointer;
    overflow: hidden;
    padding-right: 3rem;
    text-overflow: ellipsis;
    white-space: nowrap;

    &::-ms-expand {
      background-color: transparent;
      border: 0;
      display: none;
    }
  }

  &::after {
    background-position: center center;
    background-repeat: no-repeat;
    background-size: 1.4rem 1.4rem;
    content: '';
    height: 1.4rem;
    pointer-events: none;
    position: absolute;
    right: @padding-base-horizontal;
    top: 50%;
    transform: translateY(-50%);
    width: 1.4rem;
    .svg-bg-add-fill('@{svg-path}chevron-down.svg', @text-color);
  }
}


// -------------------------
// Rhinoselect Modifiers
// -------------------------


/*.rhinoselect--default {
  &::after {
    .svg-bg-add-fill('@{svg-path}chevron-down.svg', red);
  }
}*/

.rhinoselect--sm {
  &::after {
    background-size: 1.2rem 1.2rem;
    right: @padding-small-horizontal;
  }
}



// -------------------------
// Rhinoswitcher
// -------------------------


.rhinoswitcher {
  display: inline-block;
  height: @switcher-height;
  margin-bottom: @margin-small;
  margin-top: @margin-small;
  user-select: none;
  width: @switcher-width;
}


// -------------------------
// Rhinoswitcher Modifiers
// -------------------------


.rhinoswitcher--disabled {
  cursor: not-allowed;
  opacity: .5;
  pointer-events: none;
}


// -------------------------
// Rhinoswitcher Icon
// -------------------------


.rhinoswitcher__icon {
  top: 0;
}


// -------------------------
// Rhinoswitcher Inner
// -------------------------


.rhinoswitcher__inner {
  font-size: 0;
  height: @switcher-height;
  transform: translateX(-50%);
  transition: transform 250ms @trans-timing-cubic;
  width: 200%;
}


// -------------------------
// Rhinoswitcher Input
// -------------------------


.rhinoswitcher__input {
  display: none;
}

.rhinoswitcher__input:checked ~ .rhinoswitcher__label {
  .rhinoswitcher__inner {
    transform: translateX(0);
  }

  .rhinoswitcher__off::after {
    transform: translateX(-@switcher-toggler-width - (@switcher-toggler-margin * 2));
  }
}


// -------------------------
// Rhinoswitcher Label
// -------------------------


.rhinoswitcher__label {
  border-radius: @switcher-border-radius;
  cursor: pointer;
  display: block;
  height: @switcher-height;
  margin-bottom: 0;
  overflow: hidden;
  position: relative;
  width: 100%;
  word-spacing: 0;
  z-index: 20;
}




// -------------------------
// Rhinoswitcher On/Off
// -------------------------

.rhinoswitcher__off,
.rhinoswitcher__on {
  align-items: center;
  color: @white;
  display: inline-flex;
  font-size: 1.2rem;
  height: 100%;
  justify-content: center;
  line-height: @switcher-state-line-height;
  position: relative;
  text-align: center;
  width: 50%;
}

.rhinoswitcher__off {
  background-color: @gray;
  padding-left: @switcher-state-padding;
  z-index: 2;

  &::after {
    content: '';
    .rhinoswitcher__toggler;
  }
}

.rhinoswitcher__on {
  background-color: @form-element-color;
  padding-right: @switcher-state-padding;
}


// -------------------------
// Rhinoswitcher Toggler
// -------------------------


.rhinoswitcher__toggler {
  background-color: @white;
  border-radius: .2rem;
  height: @switcher-toggler-height;
  left: 0;
  margin: @switcher-toggler-margin;
  position: absolute;
  text-align: center;
  top: 0;
  transform: translateX(0);
  transition: transform 250ms @trans-timing-cubic;
  width: @switcher-toggler-width;
  z-index: 10;
}



